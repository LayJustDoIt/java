@startuml
Client -> ServiceCreditsAutomationImpl: retrieveServiceCreditSummaryByListSAIDForActiveServiceCredit

activate ServiceCreditsAutomationImpl
activate ServiceCreditServiceBusinessService
activate ServiceCreditDataService
ServiceCreditsAutomationImpl -> ServiceCreditsAutomationImpl: verify input parameter
alt verification success case
    ServiceCreditsAutomationImpl -> ServiceCreditServiceBusinessService: sumObligationCountByListSAID
    ServiceCreditServiceBusinessService -> ServiceCreditDataService: sumObligationCountByListSAID
    ServiceCreditDataService -> ServiceCreditServiceBusinessService:return count
    ServiceCreditServiceBusinessService -> ServiceCreditsAutomationImpl : return count
    alt count > 0 
    	ServiceCreditsAutomationImpl -> ServiceCreditServiceBusinessService: retrieveListRawServiceCreditDeliverableByListSAID
    	ServiceCreditServiceBusinessService -> ServiceCreditDataService: retrieveListRawServiceCreditDeliverableByListSAID
    	ServiceCreditDataService -> ServiceCreditServiceBusinessService:return deliverable lists
    	ServiceCreditServiceBusinessService -> ServiceCreditsAutomationImpl : return deliverable lists
    	
    	alt lists is not empty
    		ServiceCreditsAutomationImpl -> ServiceCreditServiceBusinessService:calculateActiveServiceCreditDateForListRawServiceCreditDeliverable
    		loop lists
	    		ServiceCreditServiceBusinessService -> serviceCreditBusinessLogicUtil: retrieveCountryInfoByCountryCode
	    		serviceCreditBusinessLogicUtil -> ServiceCreditDataService: retrieveCountryInfoByCountryCode
	    		ServiceCreditDataService -> ServiceCreditServiceBusinessService:return country info
	    		ServiceCreditServiceBusinessService -> ServiceCreditsAutomationImpl : return country info
	    		
	    		ServiceCreditServiceBusinessService -> serviceCreditBusinessLogicUtil:retrieveEarliestAndLatestTimeZonesByIso2CountryCode
	    		serviceCreditBusinessLogicUtil -> timeZoneBusinessService: retrieveTimeZonesByIso2CharacterCountryCode
	    		timeZoneBusinessService -> serviceCreditBusinessLogicUtil: return country time zone information
	    		serviceCreditBusinessLogicUtil -> ServiceCreditServiceBusinessService:return country time zone information
	    		ServiceCreditServiceBusinessService -> ServiceCreditServiceBusinessService:calculateActiveServiceCreditDate
        	end
        	ServiceCreditServiceBusinessService -> ServiceCreditsAutomationImpl : return active deliverables
    	else lists is empty
    		ServiceCreditsAutomationImpl -> Client:return SERVICE_CREDITS_SUMMARY_ERROR_NO_SERVICECREDIT
    	end
    	
    	alt lists is not empty
    		ServiceCreditsAutomationImpl -> ServiceCreditServiceBusinessService:consolidateServiceCreditInfoList
    		ServiceCreditServiceBusinessService -> ServiceCreditsAutomationImpl : return consolidate deliverable lists
    		
    		ServiceCreditsAutomationImpl -> ServiceCreditServiceBusinessService:retrieveListServiceCreditRedemptionByListRawServiceCreditInfo
    		ServiceCreditServiceBusinessService -> ServiceCreditDataService: retrieveListServiceCreditRedemptionByListRawServiceCreditInfo
    		ServiceCreditDataService -> ServiceCreditServiceBusinessService:return Redemption lists
    		ServiceCreditServiceBusinessService -> ServiceCreditsAutomationImpl : return Redemption lists
    		
    		ServiceCreditsAutomationImpl -> ServiceCreditsAutomationImpl: calculate service credit summary
    		
    	else lists is empty
    		ServiceCreditsAutomationImpl -> Client:return SERVICE_CREDITS_SUMMARY_ERROR_NO_ACTIVESERVICECREDIT
    	end
    else else lists is empty
    	ServiceCreditsAutomationImpl -> Client:return SERVICE_CREDITS_SUMMARY_ERROR_NO_OBLIGATION
    end
    ServiceCreditsAutomationImpl -> Client:return service credit summary
else verification failure
    ServiceCreditsAutomationImpl -> Client:return SERVICE_CREDITS_SUMMARY_ERROR_EMPTY_SAIDS
else any exception
   ServiceCreditsAutomationImpl -> Client: return FAILURE
end
deactivate ServiceCreditDataService
deactivate ServiceCreditServiceBusinessService
deactivate ServiceCreditsAutomationImpl
@enduml